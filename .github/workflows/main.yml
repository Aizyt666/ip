# 工作流名称，显示在 GitHub Actions 页面
name: Update IP List

# 触发条件
on:
  schedule:
    - cron: '0 */1 * * *'  # 每小时第0分钟自动触发一次（UTC时间）
  workflow_dispatch:       # 允许手动点击“Run workflow”按钮触发
  push:                   # 任何 push 到仓库也会触发此工作流

jobs:
  update-ip-list:
    runs-on: ubuntu-latest  # 使用 GitHub 最新版 Ubuntu 环境运行

    steps:
    # 第一步：检出仓库代码到 runner 工作目录
    - uses: actions/checkout@v3

    # 第二步：设置 Python 3.9 环境
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    # 第三步：安装所需 Python 库（requests 和 beautifulsoup4）
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip           # 升级 pip
        pip install requests                           # 安装 requests 库
        pip install beautifulsoup4                     # 安装 beautifulsoup4 库

    # 第四步：执行你写好的 Python 脚本，收集 IP 并生成 ip.txt 文件
    - name: Run script
      run: python ${{ github.workspace }}/collect_ips.py
      # ${{ github.workspace }} 是当前仓库根目录的绝对路径

    # 第五步：配置 Git 用户信息，并且有文件变动时提交并推送到远程仓库
    - name: Commit and push changes
      run: |
        # 设置 Git 提交作者为触发该 workflow 的 GitHub 用户名
        git config --global user.name "${{ github.actor }}"
        # 设置邮箱为 GitHub 提供的隐私保护 noreply 邮箱
        git config --global user.email "${{ github.actor }}@users.noreply.github.com"

        # 判断是否有文件改动（如 ip.txt 文件被更新）
        if [ -n "$(git status --porcelain)" ]; then
          git add ip.txt                    # 将 ip.txt 文件加入暂存区
          git commit -m "Automatic update" # 提交改动，提交信息写明自动更新
          git push                         # 推送提交到远程仓库
        else
          echo "No changes detected, skipping commit."  # 没有变化则跳过提交
        fi
